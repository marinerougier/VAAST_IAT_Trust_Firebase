filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
dataset_connection <-
database %>%
pluck("VAAST_IAT") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
View(dataset_vaast_trial)
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
experimental_condition = .x$experimental_condition,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_vaast_trial)
dataset_iat_trial <-
database %>%
pluck("iat_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
temp_data = .x$iat_trial_data,
iat_good_side = .x$iat_good_side,
iat_black_1_side = .x$iat_black_1_side)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_iat_trial)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Does not work with this ("permission denied")
database <-
fireData::download("https://marineexpe.firebaseio.com", "/") %>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
# participant dataset -----------------------------------------------------
# dataset_participant <-
#  database %>%
#  pluck("participant_id") %>%
#  map_dfr(~tibble(epoch = .x$timestamp,
#                      jspsych_id = .x$jspsych_id,
#                      prolific_id = .x$prolific_id,
#                      taskOrder = .x$taskOrder,
#                      firstblockvaast = .x$experimental_condition,
#                      iat_good_side = .x$iat_good_side,
#                      iat_black_1_side = .x$iat_black_1_side)) %>%
#  mutate(timestamp = lubridate::as_datetime(epoch / 1000 ))
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
firstblockvaast = .x$experimental_condition,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# iat dataset -------------------------------------------------------------
dataset_iat_trial <-
database %>%
pluck("iat_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
temp_data = .x$iat_trial_data,
iat_good_side = .x$iat_good_side,
iat_black_1_side = .x$iat_black_1_side)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# browser event dataset ---------------------------------------------------
dataset_browser_event <-
database %>%
pluck("browser_event") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(jspsych_id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# connections -------------------------------------------------------------
dataset_connection <-
database %>%
pluck("VAAST_IAT") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
View(dataset_connection)
DF_VAAST <- merge(dataset_connection, dataset_vaast_trial)
View(DF_VAAST)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Does not work with this ("permission denied")
database <-
fireData::download("https://marineexpe.firebaseio.com", "/") %>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
# participant dataset -----------------------------------------------------
# dataset_participant <-
#  database %>%
#  pluck("participant_id") %>%
#  map_dfr(~tibble(epoch = .x$timestamp,
#                      jspsych_id = .x$jspsych_id,
#                      prolific_id = .x$prolific_id,
#                      taskOrder = .x$taskOrder,
#                      firstblockvaast = .x$experimental_condition,
#                      iat_good_side = .x$iat_good_side,
#                      iat_black_1_side = .x$iat_black_1_side)) %>%
#  mutate(timestamp = lubridate::as_datetime(epoch / 1000 ))
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
firstblockvaast = .x$experimental_condition,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# iat dataset -------------------------------------------------------------
dataset_iat_trial <-
database %>%
pluck("iat_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
temp_data = .x$iat_trial_data,
iat_good_side = .x$iat_good_side,
iat_black_1_side = .x$iat_black_1_side)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# browser event dataset ---------------------------------------------------
dataset_browser_event <-
database %>%
pluck("browser_event") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$event_data,
completion = .x$completion),
.id = "id") %>%
group_by(jspsych_id) %>%
arrange(desc(epoch)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# connections -------------------------------------------------------------
dataset_connection <-
database %>%
pluck("VAAST_IAT") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
# export ------------------------------------------------------------------
#map2(list(dataset_browser_event,
#          dataset_iat_trial,
#          dataset_participant,
#          dataset_vaast_trial,
#          dataset_connection),
#     list("dataset_browser_event",
#          "dataset_iat_trial",
#          "dataset_participant",
#          "dataset_vaast_trial",
#          "dataset_connection"),
#     ~write_rds(.x, glue("data/{.y}.RData")))
save(dataset_vaast_trial, file = "data_VAAST.RData")
save(dataset_iat_trial, file = "data_IAT.RData")
save(dataset_browser_event, file = "data_browser.RData")
save(dataset_connection, file = "data_connection.RData")
save(dataset_vaast_trial, file = "data/data_VAAST.RData")
save(dataset_iat_trial, file = "data/data_IAT.RData")
save(dataset_browser_event, file = "data/data_browser.RData")
save(dataset_connection, file = "data/data_connection.RData")
### Workspace -------------------------------------------------------------------
# To reset the workspace
rm(list=ls())
### Loading packages ------------------------------------------------------------
library(plyr)
library(dplyr)
library(gdata)
library(reshape)
library(car)
#library(tidyverse)
library(tidyr)
library(magrittr)
library(data.table)
library(ggplot2) # for the graphics
library(readr)
library(stringr)
library(psych)
library(GPArotation)
library(tidyverse)
# for the confidence intervals
ci.fun <- function (x) {
moe<-qt(0.975, length(x)-1) * sd(x,na.rm=TRUE) / sqrt(length(x))
LI <- mean(x,na.rm=TRUE) - moe
HI <- mean(x,na.rm=TRUE) + moe
Mean <- mean(x,na.rm=TRUE)
CI<-cbind(LI,Mean,HI)
colnames(CI)<-c("2.5%","Mean","97.5%")
row.names(CI)<-deparse(substitute(x))
CI
}
# Left Outter Join
LOT <- function(X = NULL, Y = NULL, onCol = NULL) {
giveExemple <- is.null(X) & is.null(Y) & is.null(onCol)
if (giveExemple) {
cat("\nExemple:")
cat("\n>X\n")
X <- data.table(id = 1:5, L = letters[1:5]) %T>% print
cat("\n>Y\n")
Y <- data.table(id = 3:5, L = c(NA, "g", "h"), N = c(10, NA, 12)) %T>% print
onCol <- "id"
cat('\nLOT(X, Y, "id")\n')
}
n <- names(Y)
X[Y, (n) := mget(paste0("i.", n)), on = onCol]
if (giveExemple) {cat(">X\n"); print(X)}
}
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
load("data/data_VAAST.RData")
load("data/data_VAAST.RData")
data_VAAST <- data_VAAST
load("data/data_VAAST.RData")
data_VAAST <- dataset_vaast_trial
head(data_VAAST)
data_VAAST <- data.table(data_VAAST)
head(data_VAAST)
head(data_VAAST, 50)
View(data_VAAST)
### Workspace -------------------------------------------------------------------
# To reset the workspace
rm(list=ls())
### Loading packages ------------------------------------------------------------
library(plyr)
library(dplyr)
library(gdata)
library(reshape)
library(car)
#library(tidyverse)
library(tidyr)
library(magrittr)
library(data.table)
library(ggplot2) # for the graphics
library(readr)
library(stringr)
library(psych)
library(GPArotation)
library(tidyverse)
# for the confidence intervals
ci.fun <- function (x) {
moe<-qt(0.975, length(x)-1) * sd(x,na.rm=TRUE) / sqrt(length(x))
LI <- mean(x,na.rm=TRUE) - moe
HI <- mean(x,na.rm=TRUE) + moe
Mean <- mean(x,na.rm=TRUE)
CI<-cbind(LI,Mean,HI)
colnames(CI)<-c("2.5%","Mean","97.5%")
row.names(CI)<-deparse(substitute(x))
CI
}
# Left Outter Join
LOT <- function(X = NULL, Y = NULL, onCol = NULL) {
giveExemple <- is.null(X) & is.null(Y) & is.null(onCol)
if (giveExemple) {
cat("\nExemple:")
cat("\n>X\n")
X <- data.table(id = 1:5, L = letters[1:5]) %T>% print
cat("\n>Y\n")
Y <- data.table(id = 3:5, L = c(NA, "g", "h"), N = c(10, NA, 12)) %T>% print
onCol <- "id"
cat('\nLOT(X, Y, "id")\n')
}
n <- names(Y)
X[Y, (n) := mget(paste0("i.", n)), on = onCol]
if (giveExemple) {cat(">X\n"); print(X)}
}
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
#-----------------------------------------------------------
#                     VAAST
#-----------------------------------------------------------
### Data files import and dataset formating -----------------------------------------------------------
load("data/data_VAAST.RData")
DF <- dataset_vaast_trial
# we transform the format in data table
DF <- data.table(DF)
head(DF)
# Defining the "Subject", "Stimuli", "Movement" and "Valence" as factors.
DF$jspsych_id  <- factor(DF$jspsych_id)
DF$prolific_id <- factor(DF$prolific_id)
DF$Stimuli  <- factor(DF$stimulus)
DF$Movement <- factor(DF$movement)
DF$Group  <- factor(DF$group)
# We subset the training phases
DF <- subset (DF, phase=="test")
# Calculating the rate of incorrect trials per participant
DFACC <- data.frame (DF$correct, DF$jspsych_id)
head(DFACC)
DFACC <- aggregate (DFACC[, 1], list(DFACC$DF.jspsych_id), sum)
DFACC <- rename.vars (DFACC, c("Group.1","x"), c("jspsych_id","ACC_rate"))
arrange(DFACC,ACC_rate)
# We keep only the approach/avoidance trial
# (i.e., we remove trials coding for fixation and position 1)
DF <- subset (DF, position == 2)
head(DF)
View(DF)
DFACC <- data.frame (DF$correct, DF$jspsych_id)
DFACC <- aggregate (DFACC[, 1], list(DFACC$DF.jspsych_id), sum)
DFACC <- rename.vars (DFACC, c("Group.1","x"), c("jspsych_id","ACC_rate"))
arrange(DFACC,ACC_rate)
# Overall rate of incorrect trials (here, 4.57 % with the previous exclusion)
1 - (nrow(DF[DF$correct == 1, ]) / nrow(DF) )
# Overall rate of incorrect trials (here, 4.57 % with the previous exclusion)
1 - (nrow(DF[DF$correct == TRUE, ]) / nrow(DF) )
table(DF$RT)
table(DF$rt)
head(DF)
DF <-
within(DF,
{
# Compatibility score
Compatibility <- ifelse((Group == "white" & Movement == "approach") |
(Group == "black" & Movement == "avoidance"),
"Comp", "Incomp")
# Control factors
FirstBlock_C <- -0.5 * (firstblockvaast == "approach_black") + 0.5 * (firstblockvaast == "approach_white")
TaskOrder_C <- -0.5 * (taskOrder == "VAAST_first") + 0.5 * (taskOrder == "IAT_first")
})
head(DF)
DF <- data.table(DF)
DF[, meanRTComp := mean(RTinv), .(jspsych_id, Compatibility)]
DF <- data.table(DF)
DF[, meanRTComp := mean(rt), .(jspsych_id, Compatibility)]
# Creating mean/pp for compatible and incompatible blocks
DF[, meanRTComp := mean(rt), .(jspsych_id, Compatibility)]
# DV transformation -----------------------------------------------------------
# Inverse transformation of RTs
DF$RTinv <- 1/DF$rt
# Creating mean/pp for compatible and incompatible blocks
# DF <- data.table(DF)
DF[, meanRTComp := mean(RTinv), .(jspsych_id, Compatibility)]
head(DF)
# Creating an average compatibility score
DF[, diff_VAAST := unique(meanRTComp[Compatibility == "Incomp"]) - unique(meanRTComp[Compatibility == "Comp"]), session_id]
# Creating an average compatibility score
DF[, diff_VAAST := unique(meanRTComp[Compatibility == "Incomp"]) - unique(meanRTComp[Compatibility == "Comp"]), jspsych_id]
# Creating a new DF with only the useful info
DF_short <- DF[, .(diff_VAAST =  unique(diff_VAAST),
taskOrder  =  unique(taskOrder),
firstblockvaast =  unique(firstblockvaast)), jspsych_id]
# Creating a standardized VAAST score per pp (check if it works with more pp !!!)
DF_short$diff_VAASTz <- scale(DF_short$diff_VAAST)
head(DF_short)
load("data/data_IAT.RData")
X <- dataset_iat_trial
head(X)
X <- data.table(dataset_iat_trial)
head(X)
table(X$iat_block)
# 1) We keep all trials of Blocks 3, 4, 6, and 7
X[iat_block == 5 & iat_type == "practice", iat_block := 6]
X[iat_block == 5 & iat_type == "test", iat_block := 7]
X[iat_block == 4, iat_block := 5]
X[iat_block == 3 & iat_type == "test", iat_block := 4]
table(X$iat_block)
# 2.1) Eliminate trials with latencies ???? 10,000 ms
X <- X[rt < 10000]
# 3) Compute mean of CORRECT latencies for each block
X[, meanRTblock := mean(rt[correct == TRUE]), .(jspsych_id, iat_block)]
head(X)
tabl(X$meanRTblock)
table(X$meanRTblock)
# 4) Compute one pooled SD for all trials in B3 & B6; another for B4 & B7
X[, sdBlock3and6 := sd(rt[iat_block %in% c(3, 6)]), jspsych_id]
X[, sdBlock4and7 := sd(rt[iat_block %in% c(4, 7)]), jspsych_id]
# 5) Replace each error latency with block mean (computed in Step 3) + 600 ms
X[, rtt := ifelse(correct, rt, meanRTblock + 600)]
head(X)
# 6) Average the resulting values for each of the four blocks
X[, meanRTcorrectBlock := mean(rtt), .(jspsych_id, iat_block)]
head(X)
table(X$meanRTcorrectBlock)
# 7) Compute two differences: B6-B3 and B7-B4
X[, diffMeanRTcorrectBlock6minus3 := unique(meanRTcorrectBlock[iat_block == 6]) - unique(meanRTcorrectBlock[iat_block == 3]), jspsych_id]
X[, diffMeanRTcorrectBlock7minus4 := unique(meanRTcorrectBlock[iat_block == 7]) - unique(meanRTcorrectBlock[iat_block == 4]), jspsych_id]
# 8) Divide each difference by its associated pooled-trials SD from Step 4
X[, Dscore6and3 := diffMeanRTcorrectBlock6minus3 / sdBlock3and6, jspsych_id]
X[, Dscore4and7 := diffMeanRTcorrectBlock7minus4 / sdBlock4and7, jspsych_id]
# 9) Average the two quotients from Step 8
X[, Dscore := mean(c(Dscore6and3, Dscore4and7)), jspsych_id]
head(X)
X <-
within(X,
{BlockOrder <- ifelse((iat_label_left == "GOOD-WHITE people" & iat_block == 3) |
(iat_label_right == "GOOD-WHITE people" & iat_block == 3),
"CompFirst", "IncompFirst")})
head(X)
table(X$BlockOrder)
# Inversing the D score as function of this block order
X[BlockOrder == "IncompFirst", Dscore := -Dscore]
D <- X[, .(Dscore = unique(Dscore),
TaskOrder= unique(TaskOrder),
BlockOrder= unique(BlockOrder)), jspsych_id]
# Creating a new DF with only the useful info
D <- X[, .(Dscore = unique(Dscore),
taskOrder= unique(taskOrder),
BlockOrder= unique(BlockOrder)), jspsych_id]
head(D)
# Creating a standardized VAAST score per pp (check if it works with more pp !!!)
D$Dscorez <- scale(D$Dscore)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Does not work with this ("permission denied")
database <-
fireData::download("https://marineexpe.firebaseio.com", "/") %>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
firstblockvaast = .x$experimental_condition,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_vaast_trial)
dataset_trust <-
database %>%
pluck("Trust_Ratings")
View(dataset_trust)
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
unnest()
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
unnest(dataset_trust)
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id))
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
mutate(subdata = map(subdata, ~ fromJSON(.x))) %>%
unnest()
dataset_vaast_trial <-
database %>%
pluck("vaast_trial")
View(dataset_vaast_trial)
