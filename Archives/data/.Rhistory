direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted")
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p})",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3))) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
size  = 3,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted")
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p})",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3))) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 4e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p})",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3))) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
size  = 3,
nudge_x = 4,
direction = "y", linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p})",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3))) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p}",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3))) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p}",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3))) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
segment.alpha = 0,
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p}",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3)),
term = fct_reorder(estimate)) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
segment.alpha = 0,
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p}",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3)),
term = fct_reorder(terme, estimate)) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
segment.alpha = 0,
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
model %>%
broom.mixed::tidy(conf.int = TRUE,
conf.method = "Wald") %>%
filter(effect == "fixed",
term   != "(Intercept)") %>%
mutate(term =
term %>%
str_replace_all("_c(?=:|$)", "") %>%
str_replace_all("_", " ") %>%
str_replace_all(":", " × "),
apa = glue("t({df}) = {t}, p = {p}",
df = round(df, 2),
t  = round(statistic, 2),
p  = round(p.value, 3)),
term = fct_reorder(term, estimate)) %>%
ggplot(aes(y = term)) +
geom_point(aes(x = estimate)) +
geom_segment(aes(x    = conf.low,
xend = conf.high,
yend = term)) +
ggrepel::geom_text_repel(aes(x = estimate, label = apa),
segment.alpha = 0,
size  = 3,
nudge_x = 4,
direction = "y") +
geom_vline(xintercept = 0, linetype = "dotted") +
xlim(-2e-04, 6e-04)
summary(model)
# packages ----------------------------------------------------------------
library(tidyverse)
library(reshape2)
# data import -------------------------------------------------------------
dataset_tidy <- read_rds("data/dataset_tidy.RData")
View(dataset_tidy)
glimpse(dataset_tidy)
dataset_tidy %>%
drop_na() %>%
select(session_id,
starts_with("cond"),
starts_with("iat")) %>%
unnest()
glimpse()
View(dataset_tidy)
glimpse(dataset_tidy)
dataset_tidy %>%
drop_na() %>%
select(session_id,
starts_with("cond"),
starts_with("iat")) %>%
unnest()
glimpse()
data_alaysis <-
dataset_tidy %>%
drop_na() %>%
select(session_id,
starts_with("cond"),
starts_with("iat")) %>%
unnest() %>%
mutate(
iat_block_type =
case_when(
iat_label_left == "SELF-LUUPITE" | iat_label_right == "SELF-LUUPITE" ~ "self_luupite",
iat_label_left == "SELF-NIFFITE" | iat_label_right == "SELF-NIFFITE" ~ "self_niffite"
)
) %>%
filter(rt > 400,
rt < 10000,
iat_type == "test") %>%
group_by(session_id) %>%
mutate(SD = sd(rt)) %>%
ungroup() %>%
dcast(session_id + cond_approach_training + SD ~ iat_block_type,
value.var = "rt",
fun.aggregate = mean) %>%
mutate_at(vars("self_luupite", "self_niffite"),
funs(./SD)) %>%
mutate(D2 = self_luupite - self_niffite)
View(data_alaysis)
# packages ----------------------------------------------------------------
library(tidyverse)
library(reshape2)
# data import -------------------------------------------------------------
dataset_tidy <- read_rds("data/dataset_tidy.RData")
glimpse(dataset_tidy)
dataset_tidy %>%
drop_na() %>%
select(session_id,
starts_with("cond"),
starts_with("iat")) %>%
unnest()
glimpse()
View(dataset_tidy)
library(tidyverse)
library(hrbrthemes)
library(lme4)
library(lmerTest)
library(modelr)
library(ggbeeswarm)
library(broom)
library(glue)
theme_set(theme_ipsum())
dataset <-
read_rds("data/dataset_tidy.RData") %>%
select(session_id,
starts_with("cond"),
iat_data) %>%
drop_na() %>%
unnest()
View(dataset)
vaast <-
read_rds("data/dataset_vaast_trial.RData") %>%
select(-epoch) %>%
add_count(session_id) %>%
mutate(n = n / 3) %>%
group_by(session_id, n) %>%
nest() %>%
rename(vaast_trial = n,
vaast_data = data)
# packages ----------------------------------------------------------------
library(tidyverse)
vaast <-
read_rds("data/dataset_vaast_trial.RData") %>%
select(-epoch) %>%
add_count(session_id) %>%
mutate(n = n / 3) %>%
group_by(session_id, n) %>%
nest() %>%
rename(vaast_trial = n,
vaast_data = data)
View(vaast)
dataset <-
read_rds("data/dataset_tidy.RData") %>%
select(session_id,
#starts_with("cond"),
vaast_data) %>%
drop_na() %>%
unnest()
View(vaast)
View(dataset)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(fireData)
library(RJSONIO)
library(data.table)
library(magrittr)
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
View(dataset)
View(database)
head(database)
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
head(database)
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
head(database)
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
head(database)
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")
head(database)
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")
head(database)
token <- anonymous_login(project_api = "A3d4af112-4160-4b21-b65b-6027674b8a3e")
token$idToken
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")
head(database)
??fireData
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
head(database)
token <- anonymous_login(project_api = "AIzaSyBwDr8n-RNCbBOk1lKIxw7AFgslXGcnQzM")
# database import ---------------------------------------------------------
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
head(database)
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
database <-
fromJSON("data/marineexpe-export.json")
View(database)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(fireData)
library(RJSONIO)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Does not work with this ("permission denied")
# database <-
#  fireData::download("https://marineexpe.firebaseio.com", "/")%>%
#  write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
database <-
fromJSON("data/marineexpe-export.json")
View(database)
# vaast dataset -----------------------------------------------------------
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_vaast_trial)
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x)))
View(dataset_vaast_trial)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
# custom functions --------------------------------------------------------
# database import ---------------------------------------------------------
database <-
fireData::download("https://vaast-aat-replication.firebaseio.com", "/") %>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
session_id = .x$session_id,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x)))
head(dataset_vaast_trial)
View(database)
View(dataset_vaast_trial)
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
session_id = .x$session_id,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
View(dataset_vaast_trial)
dataset_vaast_trial <-
database %>%
pluck("vaast_trial") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
session_id = .x$session_id,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x)))
View(dataset_vaast_trial)
head(dataset_vaast_trial)
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
#library(fireData)
library(RJSONIO)
library(data.table)
library(magrittr)
database <-
fireData::download("https://marineexpe.firebaseio.com", "/")%>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
View(database)
